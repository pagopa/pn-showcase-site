AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFront distribution and API Gateway proxy for AWS Location Service Maps'

Transform:
  - UpdateDeploymentTransform

Parameters:
  ProjectName:
    Type: String
    Description: "logical name for this stack, used to prefix all created resources"
    Default: pn-showcase-maps-proxy

  LocationServiceApiKeySecretName:
    Type: String
    Description: "The name of the secret in AWS Secrets Manager that holds the Location Service API Key."
    Default: pn-showcase-location-api-key

  MapsDomain:
    Type: String
    Description: "The custom domain for the CloudFront distribution"

  MapsCertificateArn:
    Type: String
    Description: "The ARN of the ACM certificate for the custom domain"

  CdnZoneId:
    Type: String
    Description: "The ID of the Route 53 Hosted Zone for the custom domain."
  
  StyleApiWafIpRateLimit:
    Type: Number
    Description: 'WAF rate limit per source IP address over a 10-minute period for the style descriptor API.'
    Default: 5000
  
  StyleApiRateLimitEvaluationWindow:
    Type: Number
    Description: 'Style descrtiptor Api WAF evaluation time in seconds'
    Default: 600
  
  AlarmSNSTopicArn:
    Type: String
    Description: ARN of alarm topic
  
  TemplateBucketBaseUrl:
    Type: String
    Description: 'The S3 bucket from which to fetch the templates used by this stack.'

  AccessLogsBucket:
    Type: String
    Description: "S3 bucket for CloudFront access logs. If '-', logging is disabled."
    Default: '-'

  CloudFrontWebAclName:
    Type: String
    Description: "The name of the WebACL in us-east-1 to associate with CloudFront."
    Default: 'pn-showcase-maps-proxy-acl'

  CloudFrontWebAclId:
    Type: String
    Description: "The ID of the WebACL in us-east-1 to associate with CloudFront."

Conditions:
  HasLogsBucket: !Not [ !Equals [ !Ref AccessLogsBucket, "-" ] ]
  CreateCloudfrontWafAlarms: !Not [ !Equals [ !Ref AlarmSNSTopicArn, "" ] ]

Resources:
  StyleDescriptorProxyApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub "${ProjectName}-style-api"
      Description: "Style descriptor proxy with URL rewriting for AWS Location Service"
      EndpointConfiguration:
        Types:
          - REGIONAL

  StyleProxyResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref StyleDescriptorProxyApi
      ParentId: !GetAtt StyleDescriptorProxyApi.RootResourceId
      PathPart: '{proxy+}'

  StyleProxyMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StyleDescriptorProxyApi
      ResourceId: !Ref StyleProxyResource
      HttpMethod: GET
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: HTTP
        IntegrationHttpMethod: GET
        Uri: 'https://maps.geo.eu-central-1.amazonaws.com/{proxy}'
        RequestParameters:
          integration.request.path.proxy: 'method.request.path.proxy'
          integration.request.querystring.key: !Sub "'{{resolve:secretsmanager:${LocationServiceApiKeySecretName}:SecretString:Key}}'"
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Cache-Control: "'no-cache, no-store, must-revalidate'"
            ResponseTemplates:
              application/json: !Sub |
                #set($bodyContent = $input.body)
                #set($step1 = $bodyContent.replace("https://maps.geo.eu-central-1.amazonaws.com", "https://${MapsDomain}"))
                #set($apiKeyToRemove = "?key={{resolve:secretsmanager:${LocationServiceApiKeySecretName}:SecretString:Key}}")
                $step1.replace($apiKeyToRemove, "")
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Cache-Control: true

  StyleProxyOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref StyleDescriptorProxyApi
      ResourceId: !Ref StyleProxyResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'GET,HEAD,OPTIONS'"
            ResponseTemplates:
              application/json: ''
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
  
  # Deployment
  StyleApiDeploymentPnPlaceholderEpochSeconds:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - StyleProxyMethod
      - StyleProxyOptionsMethod
    Properties:
      RestApiId: !Ref StyleDescriptorProxyApi

  StyleApiStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref StyleDescriptorProxyApi
      StageName: 'unique'
      DeploymentId: !Ref StyleApiDeploymentPnPlaceholderEpochSeconds
      AccessLogSetting:
        DestinationArn: !GetAtt StyleApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","caller":"$context.identity.caller","user":"$context.identity.user","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'

  StyleApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/apigateway/${ProjectName}-style-api"
      RetentionInDays: 14
  
  StyleApiWaf:
    Type: AWS::CloudFormation::Stack
    DependsOn: StyleApiStage
    Properties:
      TemplateURL: !Sub "${TemplateBucketBaseUrl}/fragments/public-enpoints-waf-acl.yaml"
      Parameters:
        WAFName: !Sub '${ProjectName}-style-descriptor-api-acl'
        ResourceArn: !Sub "arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/${StyleDescriptorProxyApi}/stages/unique"
        ApiName: !Sub "${ProjectName}-style-api"
        TargetType: APIGATEWAY
        IpRateLimit: !Ref StyleApiWafIpRateLimit
        RateLimitEvaluationWindowSec: !Ref StyleApiRateLimitEvaluationWindow
        AlarmSNSTopicArn: !Ref AlarmSNSTopicArn

  AddApiKeyToAssetsFunction:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Sub "${ProjectName}-add-api-key"
      AutoPublish: true
      FunctionCode: !Sub |
        function handler(event) {
          var request = event.request;
          var querystring = request.querystring;
          querystring['key'] = {
            value: '{{resolve:secretsmanager:${LocationServiceApiKeySecretName}:SecretString:Key}}'
          };
          return request;
        }
      FunctionConfig:
        Comment: 'Adds AWS Location Service API key to asset requests'
        Runtime: 'cloudfront-js-1.0'

  LocationProxyDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: "Proxy for AWS Location Service"
        Enabled: true
        PriceClass: 'PriceClass_100'
        WebACLId: !Sub 'arn:aws:wafv2:us-east-1:${AWS::AccountId}:global/webacl/${CloudFrontWebAclName}/${CloudFrontWebAclId}'
        Aliases:
          - !Ref MapsDomain
        ViewerCertificate:
          AcmCertificateArn: !Ref MapsCertificateArn
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        Logging: !If
          - HasLogsBucket
          - Bucket: !Sub '${AccessLogsBucket}.s3.eu-south-1.amazonaws.com'
            IncludeCookies: false
          - !Ref AWS::NoValue
        Origins:
          - Id: 'StyleDescriptorApiOrigin'
            DomainName: !Sub '${StyleDescriptorProxyApi}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: '/unique'
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: 'https-only'
              OriginSSLProtocols:
                - 'TLSv1.2'
          - Id: 'LocationServiceAssetsOrigin'
            DomainName: 'maps.geo.eu-central-1.amazonaws.com'
            CustomOriginConfig:
              HTTPPort: 443
              HTTPSPort: 443
              OriginProtocolPolicy: 'https-only'
              OriginSSLProtocols:
                - 'TLSv1.2'
        DefaultCacheBehavior:
          TargetOriginId: 'LocationServiceAssetsOrigin'
          ViewerProtocolPolicy: 'redirect-to-https'
          AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
          CachedMethods: ['GET', 'HEAD']
          Compress: true
          CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # CachingDisabled
          OriginRequestPolicyId: 'b689b0a8-53d0-40ab-baf2-68738e2966ac' # AllViewer
          ResponseHeadersPolicyId: '67f7725c-6f97-4210-82d7-5512b31e9d03' # SecurityHeadersPolicy
          FunctionAssociations:
            - EventType: 'viewer-request'
              FunctionARN: !GetAtt AddApiKeyToAssetsFunction.FunctionARN
        CacheBehaviors:
          - PathPattern: '/v2/styles/*/descriptor'
            TargetOriginId: 'StyleDescriptorApiOrigin'
            ViewerProtocolPolicy: 'redirect-to-https'
            AllowedMethods: ['GET', 'HEAD', 'OPTIONS']
            CachedMethods: ['GET', 'HEAD']
            Compress: true
            CachePolicyId: '4135ea2d-6df8-44a3-9df3-4b5a84be39ad' # CachingDisabled
            OriginRequestPolicyId: '88a5eaf4-2fd4-4709-b370-b4c650ea3fcf' # AllViewerExceptHostHeader
            ResponseHeadersPolicyId: '67f7725c-6f97-4210-82d7-5512b31e9d03' # SecurityHeadersPolicy

  Route53RecordForDistribution:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Ref MapsDomain
      Type: A
      HostedZoneId: !Ref CdnZoneId
      AliasTarget:
        DNSName: !GetAtt LocationProxyDistribution.DomainName
        EvaluateTargetHealth: false
        HostedZoneId: Z2FDTNDATAQYW2 # Cloudfront hosted zone ID 

  CloudFrontWafAggregateAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: CreateCloudfrontWafAlarms
    Properties:
      AlarmName: !Sub "${CloudFrontWebAclName}-Aggregate-BlockedRequests"
      AlarmDescription: "Alarm for when any rule in the CloudFront WAF blocks a request."
      Namespace: "AWS/WAFV2"
      MetricName: "BlockedRequests"
      Dimensions:
        - Name: "Region"
          Value: "us-east-1"
        - Name: "WebACL"
          Value: !Ref CloudFrontWebAclName
      Statistic: "Sum"
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      TreatMissingData: "notBreaching"
      AlarmActions:
        - !Ref AlarmSNSTopicArn
      OKActions:
        - !Ref AlarmSNSTopicArn

Outputs:
  LocationProxyCloudFrontDomain:
    Description: 'The domain name of the CloudFront distribution for the location proxy.'
    Value: !GetAtt LocationProxyDistribution.DomainName